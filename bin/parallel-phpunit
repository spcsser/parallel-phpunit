#!/bin/bash
PID=$$
ROOT="${@: -1}" # last argument
ROOT="${ROOT%/}" # strip the last slash
ARGS="${@:1:$(($#-1))}" # remove last argument
PHPUNIT_ARG=''
CFG_MAX_THREAD=3
CFG_PHPUNIT_CMD='phpunit'
TEST_SUFFIX="Test.php,.phpt"


function show_help {
    echo "Paralleling options:"
    echo "    --pu-cmd - custom phpunit run script, default $CFG_PHPUNIT_CMD"
    echo "    --pu-threads - max threads, default $CFG_MAX_THREAD"
    echo "Usage: parallel-phpunit [switches] <directory>"
    echo ""
    exit 1
}

function set_config {
    local pos=`echo "$1" | sed 's|=.*||' | wc -c`
    local paramName=${1:0:$pos-1}
    local paramValue=${1:$pos}
    case $paramName in
        --pu-threads)
            test "$paramValue" -lt 1 || CFG_MAX_THREAD="$paramValue"
            ;;
        --pu-cmd)
            CFG_PHPUNIT_CMD="$paramValue"
            ;;
    esac
}


function get_all_files {
    mask=${TEST_SUFFIX/,/"' -o -name '*"}
    mask=" \( -name '*$mask' \)"

    cmd="find  $ROOT  $mask"
    eval $cmd
}

# search test files
# when use option --group, run files only required files
function test_files {
    local testfiles=`get_all_files`
    if [[ $ARGS == *--group* ]];then
        local param=$ARGS
        param=${param#*--group}
        param=${param%--*}
        param=${param//,/\\|}
        param=`echo $param | tr -d " "`
        for testfile in $testfiles
        do
            isFound=`grep -F -s '@group' $testfile | grep "$param"`
            if [ ! -z "$isFound" ];then
                echo $testfile
            fi
        done
    else
        for testfile in $testfiles
        do
            echo $testfile
        done
    fi
}

function replace {
    echo "$1 " | sed "s|--$2[ ][ ]*[^ ][^ ]*|--$2 $3|"
}

# http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
function in_array() {
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}


# when use shell script for run test, you have wrong count child phpunit process
function child_processes {
    #pgrep -P ${PID} | grep -v 'sleep' | wc -l
    declare -a child_list=("${!1}")
    local active=()
    local counter=0
    active=(`pgrep -P ${PID}`)
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        local pid=${child_list[$i]}
        in_array $pid ${active[@]}
        if [ $? -eq 0 ];then
            counter=`expr $counter + 1`
        fi
        i=`expr $i + 1`
    done
    echo "$counter"

}


function count {
    grep -o "$1" <<< "$progress" | wc -l | sed 's| *||'
}


function print_summary {
    progress=`find $ROOT -name parallel-phpunit.${PID}.*.log -exec cat {} \; -exec echo \; | grep "^[\.FESI][\.FESI]*$"`
    progress=$progress`find $ROOT -name parallel-phpunit.${PID}.*.log -exec cat {} \; -exec echo \; | grep "^[\.FESI][\.FESI]* " | sed 's| .*||'`
    echo "Success: `count '\.'` Fail: `count F` Error: `count E` Skip: `count S` Incomplete: `count I`"
}


function write_combined_junit {
    mkdir -p `dirname $1`
    echo "<testsuites>" > $1
    find $ROOT -name parallel-phpunit.${PID}.*.junit -exec cat {} \; | grep -v "^<?xml" | grep -v testsuites >> $1
    echo "</testsuites>" >> $1
}


function on_exit {
    
    for cid in $threads
    do
        if [ $cid -gt 0 ];then
            pkill -TERM -P ${cid} &
        fi
    done
    while [ `child_processes threads[@]` -gt 0 ]
    do
        sleep 1
    done
    find $ROOT -name parallel-phpunit.${PID}* -delete
}


function refresh_threads {
    declare -a child_list=("${!1}")
    local active=()
    active=(`pgrep -P ${PID}`)
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        local pid=${child_list[$i]}
        in_array $pid ${active[@]}
        if [ ! $? -eq 0 ];then
            child_list[$i]=0
        fi
        i=`expr $i + 1`
    done
    echo ${child_list[@]}
}


function get_free_thread {
    declare -a child_list=("${!1}")
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        if [ ${child_list[$i]} -eq 0 ];then
            echo $i
            return
        fi
    i=`expr $i + 1`
    done
    echo '-1'
}


#check system

if  ! which pgrep > /dev/null; then
    echo "Please install pgrep"
    exit 1
fi

echo "Running parallel-phpunit 1.1"

#check parameters

if [ ! -d "$ROOT" ];then
    show_help
    exit 1
fi

#extract extended options
ARGS=`echo "$ARGS" | sed 's|--pu-threads[ =]*|--pu-threads=|' | sed 's|--pu-cmd[ =]*|--pu-cmd=|'`
for param in $ARGS
do
    if [ ${param:0:4} = '--pu' ];then
        set_config "$param"
    else
        PHPUNIT_ARG="$PHPUNIT_ARG $param"
    fi
done

# init vars
threads=()
i=0
true & # ensure that $! is set
while [ $i -lt $CFG_MAX_THREAD ]
do
    threads[$i]=0
    i=`expr $i + 1`
done

junit_file=`echo "$PHPUNIT_ARG" | grep "\-\-log-junit " | sed 's|.*--log-junit [ ]*||' | sed 's| .*||'`
test_suffix=`echo "$PHPUNIT_ARG " | sed 's|.*--test-suffix[ =]*||' | sed 's| .*||'`
test -z "$test_suffix" || TEST_SUFFIX=$test_suffix

trap "on_exit" EXIT

#execute tests
i=0
for filename in `test_files`
do
    #check active process
    while [ `child_processes threads[@]` -ge $CFG_MAX_THREAD ]
    do
        sleep 1
    done
    #extract dir
    dir="$filename"
    if [ -f "$filename" ]; then
        dir=`dirname $filename`
    fi
    i=`expr $i + 1`
    #get free thread number
    threads=( $(refresh_threads threads[@]) )
    thread_id=`get_free_thread threads[@]`
    #execute
    log=$dir/parallel-phpunit.${PID}.${i}.log
    #thread number can be use in tests, example: choose free selenium host
    command="$CFG_PHPUNIT_CMD -d parallel-phpunit-thread=${thread_id} `replace "$PHPUNIT_ARG" log-junit $dir/parallel-phpunit.${PID}.${i}.junit`$filename"
    echo "Starting command with thread $thread_id: $command"
    (($command || touch $dir/parallel-phpunit.${PID}.${i}.fail) &> $log; echo "Command ended: $command"; cat $log) &
    threads[$thread_id]=$!
done

#report progress when some phpunit execution is still running
while [ `child_processes threads[@]` -gt 0 ]
do
    sleep 1
done
print_summary
test -z "$junit_file" || write_combined_junit $junit_file
test -z "`find $ROOT -name parallel-phpunit.${PID}.*.fail`"

